from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters, ConversationHandler
from collections import defaultdict

ASK_NICK, ASK_NAME, ASK_AGE, ASK_PHOTOS = range(4)
photo_collections = defaultdict(list)
media_group_track = {}
user_photos = {}

ADMIN_ID = 0000000 # –°–Æ–î–ê –í–ü–ò–°–ê–¢–¨ –°–í–û–ô –ê–ô–î–ò
GROUP_LINK = "https://t.me/your_group_invite" # –°–Æ–î–ê –í–°–¢–í–ò–¢–¨ –°–°–´–õ–ö–£, –ö–û–¢–û–†–ê–Ø –ü–ï–†–ï–î–ê–°–¢–°–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ –ü–†–ò –ü–†–ò–ù–Ø–¢–ò–ò –ó–ê–Ø–í–ö–ò


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    keyboard = [
        [InlineKeyboardButton("üì• –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="submit_request")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(chat_id=chat_id, text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ –∫–ª–∞–Ω "–û—Ç—á–∞—è–Ω–Ω—ã–µ".', reply_markup=reply_markup)

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "submit_request":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à nickname:")
        return ASK_NICK
    
async def get_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nick"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return ASK_NAME
    
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    return ASK_AGE

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["age"] = update.message.text
    keyboard = InlineKeyboardMarkup(
        [[InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="done_photos")]]
    )
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∞ –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤–æ¬ª", 
        reply_markup=keyboard
    )

    user_photos[update.message.from_user.id] = []

    return ASK_PHOTOS

async def get_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ–æ—Ç–æ
    if user_id not in user_photos:
        user_photos[user_id] = []

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ (–Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)
    file_id = update.message.photo[-1].file_id
    user_photos[user_id].append(file_id)

    await update.message.reply_text("‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤–æ¬ª.")

    return ASK_PHOTOS

async def done_photos_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    photos = user_photos.pop(user_id, [])

    if not photos:
        await query.message.reply_text("‚ùó–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
        return ASK_PHOTOS

    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É —Å –ø–æ–¥–ø–∏—Å—å—é –Ω–∞ –ø–µ—Ä–≤–æ–º —Ñ–æ—Ç–æ
    media = []
    for i, file_id in enumerate(photos):
        if i == 0:
            caption = (
                f"üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
                f"üë§ –ù–∏–∫: {context.user_data.get('nick')}\n"
                f"üßæ –ò–º—è: {context.user_data.get('name')}\n"
                f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {context.user_data.get('age')}"
            )
            media.append(InputMediaPhoto(media=file_id, caption=caption))
        else:
            media.append(InputMediaPhoto(media=file_id))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º –∞–¥–º–∏–Ω—É
    await context.bot.send_media_group(chat_id=ADMIN_ID, media=media)

    # –ö–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å / –û—Ç–∫–ª–æ–Ω–∏—Ç—å"
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve:{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user_id}")
        ]
    ])
    await context.bot.send_message(chat_id=ADMIN_ID, text="–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É?", reply_markup=keyboard)

    await query.message.reply_text("üéâ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!")

    return ConversationHandler.END

async def handle_admin_decision(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action, user_id = query.data.split(":")
    user_id = int(user_id)

    if action == "approve":
        await context.bot.send_message(chat_id=user_id, text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å: {GROUP_LINK}")
        await query.edit_message_text("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ")
    elif action == "reject":
        await context.bot.send_message(chat_id=user_id, text="‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        await query.edit_message_text("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå")

# –û—Ç–º–µ–Ω–∞ –∞–Ω–∫–µ—Ç—ã
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def get_my_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await update.message.reply_text(f"–í–∞—à ID: `{user_id}`", parse_mode="Markdown")

if __name__ == "__main__":
    app = ApplicationBuilder().token("").build() # –í–ê–® –¢–û–ö–ï–ù –û–¢ –ë–û–¢–ê TELEGRAM

    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(handle_button, pattern="^submit_request$")
        ],
        states={
            ASK_NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_nick)],
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            ASK_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
            ASK_PHOTOS: [
                MessageHandler(filters.PHOTO, get_photos),
                CallbackQueryHandler(done_photos_callback, pattern="^done_photos$")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_message=False
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("myid", get_my_id))
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(handle_admin_decision, pattern="^(approve|reject):"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()